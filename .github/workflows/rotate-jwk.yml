name: Rotate JWT Keys

on:
  workflow_dispatch:
  schedule:
    # Run this workflow every Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  rotate-keys:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '21'

    - name: Generate new key pair
      run: |
        openssl genpkey -algorithm RSA -out private.pem -pkeyopt rsa_keygen_bits:2048
        openssl rsa -pubout -in private.pem -out public.pem

    - name: Extract modulus (n)
      id: modulus
      run: |
        MODULUS=$(openssl rsa -pubin -in public.pem -modulus -noout | cut -d'=' -f2 | xxd -r -p | python3 -c "import base64, sys; print(base64.urlsafe_b64encode(sys.stdin.buffer.read()).decode().rstrip('='))")
        echo "MODULUS=$MODULUS" >> $GITHUB_ENV

    - name: Extract exponent (e)
      id: exponent
      run: |
        EXPONENT=$(openssl rsa -pubin -in public.pem -text -noout | grep "^Exponent" | awk '{print $2}' | xargs -I {} python3 -c "import base64; print(base64.urlsafe_b64encode((int({})).to_bytes(3, byteorder='big')).decode())" | tr '/+' '_-' | tr -d '=')
        echo "EXPONENT=$EXPONENT" >> $GITHUB_ENV

    - name: Generate UUID for kid
      run: |
        KID=$(uuidgen)
        echo "KID=$KID" >> $GITHUB_ENV

    - name: Update private key in Cloudflare Worker as secret
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        npx wrangler secret put PRIVATE_KEY < private.pem
        rm private.pem

    - name: Mark inactive key as revoked and update timestamps
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        npx wrangler d1 execute ${{ secrets.DATABASE_NAME }} --command="UPDATE rsa_public_keys SET status = 'revoked', updated_at = CURRENT_TIMESTAMP, valid_until = NULL WHERE status = 'inactive';"

    - name: Mark active key as inactive and update timestamps
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        npx wrangler d1 execute ${{ secrets.DATABASE_NAME }} --command="UPDATE rsa_public_keys SET status = 'inactive', updated_at = CURRENT_TIMESTAMP, valid_until = DATETIME('now', 'weekday 1', 'start of day') WHERE status = 'active';"

    - name: Insert new key into database
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        KID: ${{ env.KID }}
        MODULUS: ${{ env.MODULUS }}
        EXPONENT: ${{ env.EXPONENT }}
      run: |
        npx wrangler d1 execute ${{ secrets.DATABASE_NAME }} --command="INSERT INTO rsa_public_keys (key_id, modulus, exponent, status, created_at, updated_at, valid_from, valid_until) VALUES ('$KID', '$MODULUS', '$EXPONENT', 'active', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, DATETIME('now', 'weekday 1', 'start of day'));"

    - name: Cleanup key
      run: |
        rm public.pem
